import streamlit as st
import langchain_community
import pandas as pd
#import faiss
from langchain_community.vectorstores.faiss import FAISS
from openai import OpenAI
from langchain.document_loaders import DataFrameLoader

# Show title and description.
st.title("üìÑ –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–∫—Å—Ç—É")
#st.write(
#    "Upload a document below and ask a question about it ‚Äì GPT will answer! "
openai_api_key = st.secrets["OPENAI_API_KEY"]
if not openai_api_key:
    st.info("Please add your OpenAI API key to continue.", icon="üóùÔ∏è")
else:

    # Create an OpenAI client.
    client = OpenAI(api_key=openai_api_key)

    model = st.selectbox(
      "–í—ã–±–µ—Ä–∏—Ç–µ –ò–ò –º–æ–¥–µ–ª—å:",
      ("gpt-4.1", "o4-mini", "gpt-4o"),
    )
    # Let the user upload a file via `st.file_uploader`.
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç –∑–¥–µ—Å—å (.txt –∏–ª–∏ .md)", type=("txt", "md")
    )
    # 
    input_text = st.text_area(
        "–õ–∏–±–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç –ø—Ä—è–º–æ —Å—é–¥–∞:",
        placeholder=" ",
    #    disabled= uploaded_file,
    )
    
    st.divider()

    with st.form("qa_form"):
       st.write("–ó–∞–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –ß–∞–í–æ")
       df = pd.DataFrame(
           [
              {"–í–æ–ø—Ä–æ—Å": "?", "–û—Ç–≤–µ—Ç": "2"},
              {"–í–æ–ø—Ä–æ—Å": "?", "–û—Ç–≤–µ—Ç": "4"},
              {"–í–æ–ø—Ä–æ—Å": "?", "–û—Ç–≤–µ—Ç": "3"},
          ]
       )
       edited_df = st.data_editor(df)
       qa_submitted = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å") 
       loader = DataFrameLoader(
           dataframe = df,
           page_content_column = "–í–æ–ø—Ä–æ—Å"
        )
       documents = loader.load()
    st.write(Documents)
    st.divider()

    with st.form("question_form"):
        question = st.text_input("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–∫—Å—Ç—É:", "")
        q_submitted = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
    if q_submitted:
        if uploaded_file: 
           # Process the uploaded file and question.
           document = uploaded_file.read().decode()
           messages = [
               {
                   "role": "user",
                   "content": f"Here's a document: {document} \n\n---\n\n {question}",
               }
             ]
        elif input_text:
           # Process input text and question.
           document = input_text
           messages = [
                {
                    "role": "user",
                    "content": f"Here's a document: {document} \n\n---\n\n {question}",
                }
              ]
        # Generate an answer using the OpenAI API.
        stream = client.chat.completions.create(
              model=model,
              messages=messages,
              stream=True,
          )

        # Stream the response to the app using `st.write_stream`.
        st.write_stream(stream)
